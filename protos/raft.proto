syntax = "proto3";

package raft;

// 定义节点状态
enum NodeState {
    FOLLOWER = 0;
    CANDIDATE = 1;
    LEADER = 2;
}

// 日志条目结构
message LogEntry {
    int64 index = 1;  // 日志条目的索引
    int64 term = 2;   // 日志条目的任期
    string command = 3;  // 日志条目的命令
}

// RequestVote RPC 请求
message RequestVoteRequest {
    int64 term = 1;  // 请求者的任期
    string candidate_id = 2;  // 候选者的ID
    int64 last_log_index = 3;  // 候选者最后一个日志条目的索引
    int64 last_log_term = 4;   // 候选者最后一个日志条目的任期
}

message RequestVoteResponse {
    int64 term = 1;  // 当前任期
    bool vote_granted = 2;  // 是否投票给该候选者
}

// AppendEntries RPC 请求
message AppendEntriesRequest {
    int64 term = 1;  // 领导者的任期
    string leader_id = 2;  // 领导者ID
    int64 prev_log_index = 3;  // 前一个日志条目的索引
    int64 prev_log_term = 4;   // 前一个日志条目的任期
    repeated LogEntry entries = 5;  // 日志条目列表
    int64 leader_commit = 6;  // 领导者提交日志的索引
}

message AppendEntriesResponse {
    int64 term = 1;  // 当前任期
    bool success = 2;  // 是否成功复制日志
}

// Heartbeat RPC 请求
message HeartbeatRequest {
    int64 term = 1;  // 当前任期
}

message HeartbeatResponse {
    int64 term = 1;  // 当前任期
}

// 定义Raft服务
service RaftService {
    // 请求投票
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

    // 追加日志条目
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

    // 发送心跳
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}
